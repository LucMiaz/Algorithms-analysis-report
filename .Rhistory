a <- c(t(c(0,1,2)),t(c(3,4,5)),t(c(6,7,8)))
a
a <- c((c(0,1,2)),(c(3,4,5)),(c(6,7,8)))
a
tf <- data.frame(f=c('True','False'))
tf
tf <- data.frame(c(),c(),f=c('True','False'))
tf <- data.frame(a=c(),b=c(),f=c('True','False'))
tf <- data.frame(True=double(),
False=double(),
User=character(),
stringsAsFactors=FALSE)
tf
}}
tf<-list('True'=truths,'False'=falses)#make one variable with both truths and falses
bartrue<-hist(tf$True, density=200, breaks=50, prob=TRUE,
ylim=c(0, 10), col='#a6dba0')
tf
tf <- data.frame(True=double(),
False=double(),
User=character(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, c(dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], author))
}}
tf <- data.frame(True=double(),
False=double(),
User=character(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], author)
}
}
tf <- data.frame(True=double(),
False=double(),
User=string(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], author)
}
}
rep(1:4,2)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(data$raw$compare$test$author[[i]]))
}
}
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(data$raw$compare$test$author[[i]])))
}
}
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(dataraw$compare$test$author[[i]])))
}
}
tf
tf <- data.frame(True=double(),
False=double(),
User=string(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(dataraw$compare$test$author[[i]])))
}
}
tf
tf <- data.frame(True=double(),
False=double(),
User=string(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(dataraw$compare$test$author[[i]])))
}
}
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_10-33-16.json'
dataraw<-fromJSON(json_file)
tf <- data.frame(True=double(),
False=double(),
User=string(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(dataraw$compare$test$author[[i]])))
}
}
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_10-33-16.json'
dataraw<-fromJSON(json_file)
tf <- data.frame(True=double(),
False=double(),
User=string(),
stringsAsFactors=FALSE)
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_10-33-16.json'
dataraw<-fromJSON(json_file)
tf <- data.frame(True=double(),
False=double(),
User=character(),
stringsAsFactors=FALSE)
##to select only specific names change authors variable with c('name1','name2',...) where name1, name2, ... are the names you want to select
#authors=c('luc')
authors=names(dataraw$compare$test)
for (author in authors){
for (i in 1:length(dataraw$compare$test$author)){#take all the true/false values and add them to truths/falses
tf=rbind(tf, dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==0 & ! is.nan(dataraw$compare$test$author[[i]])], dataraw$compare$test$author[[i]][dataraw$compare$disc$author[[i]]==1 & ! is.nan(dataraw$compare$test$author[[i]])], rep(author, length(dataraw$compare$test$author[[i]])))
}
}
tf
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_14-04-48.json'
dataraw<-fromJSON(json_file)
dataraw$R
tf<-dataraw$R
summary(tf)
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_14-19-05.json'
dataraw<-fromJSON(json_file)
tf<-dataraw$R
tf
tf[tf$disc==0]
tf[tf[['disc']] ==0]
tf$disc
tf[tf$disc =0]
tf[tf$disc <0]
tf[tf$disc >0]
tf[tf$disc <1]
tf[tf$disc<1]
tf[, "disc"]
tf[, "disc"][,>0]
tf[, tf$disc>0]
tf[, tf$disc==0]
tf[, tf$disc=0]
tf[, tf$disc<1]
tf[, tf$disc]
a<-tf[, tf$disc]
a
summary(a)
View(tf)
a<-tf[, tf$disc<1]
a<-subset(tf, tf$disc =0)
a<-subset(tf, tf$disc ==0)
a
a<-tf[tf$disc<1]
tf<-dataraw$R
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 10), col='#a6dba0')
subset(tf,tf$disc==1)
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4))
subset(tf,tf$disc==1)$BPR
subset(tf,tf$disc==1)
subset(tf,tf$disc==0)
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4))
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4))
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0)$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0)$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4))
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0)$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0)$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR)$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0)$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0)$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
summary(tf, authors)
tf$author
unique(tf$author)
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
json_file<-'C:/LucMiaz/KG_dev_branch/KG/Measurements_example/MBBMZugExample/results/test_ZischenDetetkt2_2.0s_3000Hz_0dB_20-10-2015_14-59-39.json'
dataraw<-fromJSON(json_file)
tf<-dataraw$R
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 10), col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE, col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
bartrue<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE,
ylim=c(0, 4), col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
barfalse<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE, col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, xlim=c(-2,4), main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
col="#7b3294", lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
tf
unique(tf$author)
authors=str(unique(tf$author))
authors=merge(unique(tf$author))
authors=join(unique(tf$author))
authors=paste(unique(tf$author))
authors
authors=paste(unique(tf$author), sep=" ")
authors
authors=paste(unique(tf$author), sep=", ")
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE, col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
barfalse<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE, col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
#      ylim=c(0, 10), add=TRUE, col='#c2a5cf')
#curve(dnorm(x, mean=m, sd=std),
#      col="#7b3294", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.01, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-3,15),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
col="#7b3294", xlim=c(-5,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-6,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
library(tidyr)
install.library(tidyr)
install.packages(tidyr)
install.package(tidyr)
install.packages("tidyr")
??separate
c<- [tf$BPR < threshold[[1]]]
c<- c([tf$BPR < threshold[[1]]])
c<- c(tf$BPR < threshold[[1]])
threshold<-seq(0,4,0.01)
c<- c(tf$BPR < threshold[[1]])
c
c<- tf$BPR < threshold)
c<- tf$BPR < threshold
?vector
xf <-vector(length=length(threshold))
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold
}
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
nf<- length(tf$BPR[tf$disc==0])
np<- length(tf$BPR[tf$disc==1])
xf<-vector(NA,length=length(threshold))
xf <- vector(t(xf),length=nf)
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
gtf<-group(tf,AlgProp)
gtf<-group_by(tf,AlgProp)
summary(tf)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
tf$1
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
View(tf)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
json_file='C:/lucmiaz/Algorithm_Report/Datamaousdict.json'
tfd<-fromJSON(json_file)
View(tfd)
remove(tfd)
remove(json_file)
max(tf$spec)
min(tf$spec)
mean(tf$spec)
??kmeans
library(stats)
kmeans(tf$spec)
kmeans(tf$spec, 10)
clusters<-kmeans(tf$spec, 10)
clusters$cluster
setwd("C:/lucmiaz/algorithms-analysis-report")
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(extrafont)
require(tikzDevice)
loadfonts()
json_file="Datamaous.json"
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
remove(json_file)
source('R/find_best.R')
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#clusters<-kmeans(tf$spec,1000)
#tf[,'cluster']<-clusters$cluster
#to do add clusters$cluster column to tf and then merge by groups...
#tf<-cbind()
best<-find_best(tf, qualities=c(3,2))
rocplot <- ggplot(best, aes(best$FPR,best$TPR,color=best$algprop, title="Algorithms - all authors"))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=5),name="Algorithms")+
geom_point(aes(shape=best$algprop,label=best$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
ggsave('figures/ROC.pdf', plot=rocplot, width=8, height=6)
best<-find_best(tf, qualities=c(3,2))
source(R/find_best.R)
source('R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
thresholds
algtf$spec
sums
thresholds
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
sums
sums
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
sums
thresmax
summary(sums)
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
summary(sums)
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
debugSource('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
best<-find_best(tf, qualities=c(3,2))
View(best)
view(tf)
View(tf)
best<-find_best(tf, qualities=c(3,2))
for(author in unique(tf$author)){
best<- rbind(best, find_best(tf,authors=c(author), qualities=c(2,3)))
}
View(best)
best<-cbind(best, 'author'=rep('all',nrow(best)))
View(best)
best<-find_best(tf, qualities=c(3,2))
best<-cbind(best, 'author'=rep('all',nrow(best)))
for(author in unique(tf$author)){
author_best<-find_best(tf,authors=c(author), qualities=c(2,3))
best<- rbind(best, cbind(author_best,'author'=rep(author,length(author_best))))
}
source('C:/LucMiaz/Algorithms-analysis-report/R/find_best.R')
