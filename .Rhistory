authors
authors=paste(unique(tf$author), sep=" ")
authors
authors=paste(unique(tf$author), sep=", ")
bartrue<-hist(subset(tf,tf$disc==1)$BPR, density=200, breaks=50, prob=TRUE, col='#a6dba0', main=unique(tf$author), xlab='BPR')
mtrue<-mean(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR)
stdtrue<-sqrt(var(subset(tf,tf$disc==1&!is.nan(tf$BPR))$BPR))
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
barfalse<-hist(subset(tf,tf$disc==0)$BPR, density=200, breaks=50, prob=TRUE, col='#c2a5cf', xlim=c(-2,4),main=unique(tf$author), xlab='BPR')
#barfalse<-ggplot() + aes(tf$False)+ geom_histogram(binwidth=0.05, fill="#c2a5cf", add=TRUE)
mfalse<-mean(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR)
stdfalse<-sqrt(var(subset(tf,tf$disc==0 & !is.nan(tf$BPR))$BPR))
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", lwd=2, add=TRUE, yaxt="n")
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
#      ylim=c(0, 10), add=TRUE, col='#c2a5cf')
#curve(dnorm(x, mean=m, sd=std),
#      col="#7b3294", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(2.5,0.75, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(0.01,0.01),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.01, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
#hist(tf$True, density=20, breaks=20, prob=TRUE,
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(0,10),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-3,15),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
col="#7b3294", xlim=c(-5,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
curvefalse<-curve(dnorm(x, mean=mfalse, sd=stdfalse),
col="#7b3294", xlim=c(-6,16),lwd=2, main=authors, xlab="BPR", ylab="Normalized number of items")
curvetrue<-curve(dnorm(x, mean=mtrue, sd=stdtrue),
col="#008837", lwd=2, add=TRUE, yaxt="n")
legend(0.01,0.03, # places a legend at the appropriate place
c('False','True'), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(1,1),col=c('#7b3294','#008837')) # gives the legend lines the correct color and width
library(tidyr)
install.library(tidyr)
install.packages(tidyr)
install.package(tidyr)
install.packages("tidyr")
??separate
c<- [tf$BPR < threshold[[1]]]
c<- c([tf$BPR < threshold[[1]]])
c<- c(tf$BPR < threshold[[1]])
threshold<-seq(0,4,0.01)
c<- c(tf$BPR < threshold[[1]])
c
c<- tf$BPR < threshold)
c<- tf$BPR < threshold
?vector
xf <-vector(length=length(threshold))
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold
}
xf<-vector(length=length(threshold))
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
nf<- length(tf$BPR[tf$disc==0])
np<- length(tf$BPR[tf$disc==1])
xf<-vector(NA,length=length(threshold))
xf <- vector(t(xf),length=nf)
for(i in length(threshold)){
xf[[i]]<- tf$BPR[tf$disc==0]<threshold[[i]]
}
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
gtf<-group(tf,AlgProp)
gtf<-group_by(tf,AlgProp)
summary(tf)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
tf$1
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
tf
View(tf)
json_file='C:/lucmiaz/Algorithm_Report/Datamaous.json'
tf<-fromJSON(json_file)
json_file='C:/lucmiaz/Algorithm_Report/Datamaousdict.json'
tfd<-fromJSON(json_file)
View(tfd)
remove(tfd)
remove(json_file)
max(tf$spec)
min(tf$spec)
mean(tf$spec)
??kmeans
library(stats)
kmeans(tf$spec)
kmeans(tf$spec, 10)
clusters<-kmeans(tf$spec, 10)
clusters$cluster
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=20,height=20)
setwd("C:/lucmiaz/algorithms-analysis-report")
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(extrafont)
require(tikzDevice)
loadfonts()
json_file="Datamaous.json"
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
remove(json_file)
#clusters<-kmeans(tf$spec,1000)
#tf[,'cluster']<-clusters$cluster
#to do add clusters$cluster column to tf and then merge by groups...
#tf<-cbind()
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/lucmiaz/algorithms-analysis-report")
library(jsonlite)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
library(extrafont)
require(tikzDevice)
loadfonts()
json_file="Datamaous.json"
csv_file="Datamaous.csv"
tf<-read.csv(csv_file)
remove(json_file)
#clusters<-kmeans(tf$spec,1000)
#tf[,'cluster']<-clusters$cluster
#to do add clusters$cluster column to tf and then merge by groups...
#tf<-cbind()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=20,height=20)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec<=i & disc==1 & author== 'PHF' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author== 'PHF'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author== 'PHF'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author== 'PHF'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
bestones
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec<=i & disc==1 & author!= 'esr' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author!= 'esr'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
View(bestones)
View(bestalprops)
View(bestal)
View(bestalprops)
View(tf)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>=i & disc==1 & author!= 'esr' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author!= 'esr'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
View(bestones)
View(bestal)
View(bestalprops)
View(bestones)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
#thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
thresholds<-seq(-1,10,500)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>=i & disc==1 & author!= 'esr' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author!= 'esr'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
seq(-1,10,500)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
#thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
thresholds<-seq(-1,10,0.1)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>=i & disc==1 & author!= 'esr' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author!= 'esr'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbestwThresfrom-1to10.pdf", plot=rocplot,  width=8, height=6)
View(bestones)
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
bestones<-cbind(bestones, data.frame('dif'=bestones$TPR-bestones$FPR))
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbestwThresfrom-1to10.pdf", plot=rocplot,  width=8, height=6)
View(bestones)
View(tf)
View(tf)
source('find_best.R')
source('find_best.R')
source('find_best.R')
bestPHF<-find_best(tf,authors=list('PHF'))
bestPHF<-find_best(tf)
bestPHF<-find_best(tf,authors=list('PHF'))
bestPHF<-find_best(tf)
bestPHF<-find_best(tf)
source('find_best.R')
bestPHF<-find_best(tf)
source('find_best.R')
bestPHF<-find_best(tf)
source('find_best.R')
bestPHF<-find_best(tf)
source('R/find_best.R')
bestPHF<-find_best(tf)
source('R/find_best.R')
bestPHF<-find_best(tf)
list('PHF','luc')
a<-list('PHF','luc')
'luc' %in% a
source('R/find_best.R')
bestPHF<-find_best(tf)
bestPHF <-find_best(tf, plotName='figures/PHFbest.pdf', authors=list('PHF'))
bestPHF <-find_best(tf, plotName='figures/PHFbest.pdf', authors=list('PHF'))
source('R/find_best.R')
source('R/find_best.R')
best<-find_best(tf)
best$plot
source('R/find_best.R')
best<-find_best(tf)
best$plot
bestPHF <-find_best(tf, plotName='figures/PHFbest.pdf', authors=list('PHF'))
bestPHF$plot
source('R/find_best.R')
bestPHF <-find_best(tf, title='ROC for PHF',plotName='figures/PHFbest.pdf', authors=list('PHF'))
best<-find_best(tf, plotName='figures/best.pdf')
bestluc<-find_best(tf,title='ROC for luc',plotName='figures/lucbest.pdf',authors=list('luc')
)
source('R/find_best.R')
bestPHF <-find_best(tf, title='ROC for PHF',plotName='figures/PHFbest.pdf', authors=list('PHF'))
source('R/find_best.R')
bestPHF <-find_best(tf, title='ROC for PHF',plotName='figures/PHFbest.pdf', authors=list('PHF'))
bestPHF$plot
bestluc<-find_best(tf,title='ROC for luc',plotName='figures/lucroc.pdf',authors=list('luc'))
best<-find_best(tf, authors=list('luc','PHF'),plotName='figures/roc.pdf')
bestPHF <-find_best(tf, title='ROC for PHF',plotName='figures/PHFroc.pdf', authors=list('PHF'))
source('R/find_best.R')
best<-find_best(tf, authors=list('luc','PHF'),plotName='figures/roc.pdf')
