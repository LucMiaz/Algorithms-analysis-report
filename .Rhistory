bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
View(tf)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author== 'luc'& mic==5 & mID == 2925))
FP<-tally(filter(algtf, spec>i & disc==0 & author== 'luc' & mic==5 & mID == 2925))
totP<-tally(filter(algtf,disc==1,author!= 'luc',mic==5, mID==2925))
totF<-tally(filter(algtf,disc==0,author!= 'luc',mic==5, mID==2925))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec>i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
TP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID='m_292'))
TP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_292'))
TP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_292' & algprop=='100_0.02'))
View(thres)
FP<-tally(filter(tf, disc==0& author=='luc' & mic==5 & mID=='m_292' & algprop=='100_0.02' & spec>13.343))
TP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_292' & algprop=='100_0.02' & spec>13.343))
totP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_292' & algprop=='100_0.02'))
totF<-tally(filter(tf, disc==0& author=='luc' & mic==5 & mID=='m_292' & algprop=='100_0.02'))
TP/totP
TP
totP
totF<-tally(filter(tf, disc==0& author=='luc' & mic==5 & mID=='m_2925' & algprop=='100_0.02'))
totP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_2925' & algprop=='100_0.02'))
TP<-tally(filter(tf, disc==1& author=='luc' & mic==5 & mID=='m_2925' & algprop=='100_0.02' & spec>13.343))
FP<-tally(filter(tf, disc==0& author=='luc' & mic==5 & mID=='m_2925' & algprop=='100_0.02' & spec>13.343))
TP
TP/totP
FP/totF
View(bestones)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
allofthem<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec>i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
allofthem<-rbin(allofthem,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
allofthem<-cbind(allofthem, data.frame('col'=as.integer(allofthem$algprop)))
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
allofthem<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec>i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
allofthem<-rbind(allofthem,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
allofthem<-cbind(allofthem, data.frame('col'=as.integer(allofthem$algprop)))
allofthem<-cbind(allofthem, data.frame('TPRmFPR'=allofthe$TPR-allofthem$FPR))
allofthem<-cbind(allofthem, data.frame('TPRmFPR'=allofthem$TPR-allofthem$FPR))
View(allofthem)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
allofthem<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec>i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
allofthem<-rbind(allofthem,data.frame('TPR'=sums$TPR,'FPR'=sums$FPR,'thd'=sums$thd,'totP'=sums$totP,'totF'=sums$totF, 'alg'=al[[1]],'algprop'=as.character(alp),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
allofthem<-cbind(allofthem, data.frame('col'=as.integer(allofthem$algprop)))
allofthem<-cbind(allofthem, data.frame('TPRmFPR'=allofthem$TPR-allofthem$FPR))
View(allofthem)
remove(allofthem)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec<i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec<i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec<i & disc==1 & author!= 'esr'))
FP<-tally(filter(algtf, spec<i & disc==0 & author!= 'esr'))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
View(bestal)
View(bestalprops)
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author!= 'esr' & quality!=1))
FP<-tally(filter(algtf, spec>i & disc==0 & author!= 'esr'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author!= 'esr'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author!= 'esr'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec, fill=as.factor(disct)))+geom_violin(stat = "ydensity", position = "dodge")+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec>i & disc==1 & author== 'PHF' & quality!=1))
FP<-tally(filter(algtf, spec>i & disc==0 & author== 'PHF'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author== 'PHF'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author== 'PHF'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
library(gtools)
bestones<-bestones[mixedsort(bestones$algprop),]
indbest<-which.max(bestones$TPR-bestones$FPR)
thres<-bestones[indbest,]['thd']
bestalprops<-bestones[indbest,]['algprop']
bestal<-bestones[indbest,]['alg']
rocplot <- ggplot(bestones, aes(bestones$FPR,bestones$TPR,color=bestones$algprop, title='Algorithms'))+  geom_segment(aes(x =0, y = 0, xend = 1, yend = 1), colour="#a5a5a5")+
scale_colour_manual(values=rep(brewer.pal(12,"Paired"),times=2),name="Algorithms")+
scale_shape_manual(values=rep(c(15,16,3,17,18,19),each=3),name="Algorithms")+
geom_point(aes(shape=bestones$algprop,label=bestones$algprop),size=2)+
xlab("False Positive Rate") + ylab("True Positive Rate")+
labs("ROC")
#geom_point(aes(sums$n[thd==thres],sums$n.1[thd==thres]), colour="#7b3294", size=3, label=thres)
#geom_text(data=filter(sums,thd==thres),aes(label=thd))
rocplot
ggsave("figures/ROCbest.pdf", plot=rocplot,  width=8, height=6)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec, fill=as.factor(disct)))+geom_histogram()
barplot
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_histogram()
barplot
??geom_histogram
ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()
ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer(type='div')
ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer(type='seq')
ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer(type='qual')
ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')
ggsave("figures/barplot.pdf", plot=barplot,width=8,height=6)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author)
ggsave("figures/barplot.pdf", plot=barplot,width=8,height=6)
barplot
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct),binwidth = 0.5))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author)
ggsave("figures/barplot.pdf", plot=barplot,width=8,height=6)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=8,height=6)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=8,height=6)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=20,height=20)
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(spec, fill=as.factor(disct)))+geom_histogram()+scale_fill_brewer('Paired')+xlab("BPR") + ylab("Count")+facet_wrap(algprop~author, scale="free")
ggsave("figures/barplot.pdf", plot=barplot,width=20,height=20)
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec, fill=as.factor(disct)))+geom_violin(position = "dodge")+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec, fill=as.factor(disct)))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin(stat = "ydensity", position = "dodge")+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec), fill=#272822)+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#tikz('normal.tex', standAlone = TRUE, width=5, height=5)
theme_bw<-theme_update(text=element_text(size=14, family="Helvetica Neue"), axis.text=element_text(family="Helvetica Neue"),legend.background=element_rect(fill="#f5f5f5"))
theme_set(theme_bw())
#barplot<-ggplot(data=subset(tf, cluster %in% arrange(cluster, desc(cluster))[1:4,]), aes(spec, fill=as.factor(cluster)))+
barplot<-ggplot(data=filter(tf, tf$author!='esr' & tf$quality!=1), aes(disct, spec))+geom_violin()+
#geom_histogram(binwidth=0.2,alpha = 0.4, position = 'identity')+
xlab("Element was selected as flanging") + ylab("BPR")+
coord_flip()+#rotates the graphic
facet_wrap(algprop~author)+#plots by author
scale_fill_brewer(type='div')#colorscale
ggsave("figures/BPRAuthorAlgprops.pdf", plot=barplot,  width=20, height=20)
barplot
#dev.off()
#x11(width=6, height=6)
bestones<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(),'alg'=character(),'algprop'=character(), 'delta'=double())
#iterate on algorithms
for (al in unique(tf$alg)){
#iterate on parameters
for (alp in unique(tf$algprop)){
sums<-data.frame('TPR'=double(),'FPR'=double(),'thd'=double(),'totP'=double(), 'totF'=double(), 'delta'=double())
algtf<-filter(tf, algprop==alp & alg==al)
#iterate on thresholds
thresholds<-seq(min(algtf$spec),max(algtf$spec),(max(algtf$spec)-min(algtf$spec))/200)
delta<-thresholds[[2]]-thresholds[[1]]
for (i in thresholds){
TP<-tally(filter(algtf, spec<=i & disc==1 & author== 'PHF' & quality!=1))
FP<-tally(filter(algtf, spec>=i & disc==0 & author== 'PHF'& quality!=1))
totP<-tally(filter(algtf,disc==1 & author== 'PHF'& quality!=1))
totF<-tally(filter(algtf,disc==0 & author== 'PHF'& quality!=1))
if (totP>0 & totF>0){
sums[nrow(sums)+1,]<- data.frame('FPR'=FP/totF, 'TPR'=TP/totP, 'thd'=as.numeric(i), 'totP'=totP, 'totF'=totF)
}
}
thresmax<-which.max(abs(sums$TPR-sums$FPR))
bestones <-rbind(bestones,data.frame('TPR'=sums$TPR[thresmax],'FPR'=sums$FPR[thresmax],'thd'=sums$thd[thresmax],'totP'=sums$totP[thresmax],'totF'=sums$totF[thresmax], 'alg'=al[[1]],'algprop'=as.character(alp[1]),'delta'=delta))
remove(sums,thresmax)
}
}
remove(FP,TP,totP,totF,algtf,thresholds,al,alp)
bestones<-cbind(bestones, data.frame('col'=as.integer(bestones$algprop)))
